const iconValues = [
  { label: "air", value: "air" },
  { label: "animal", value: "animal" },
  { label: "any", value: "any" },
  { label: "badlands", value: "badlands" },
  { label: "beasts", value: "beasts" },
  { label: "blight", value: "blight" },
  { label: "city", value: "city" },
  { label: "custom1", value: "custom1" },
  { label: "custom2", value: "custom2" },
  { label: "custom3", value: "custom3" },
  { label: "custom4", value: "custom4" },
  { label: "dahan", value: "dahan" },
  { label: "destroyed-presence", value: "destroyed-presence" },
  { label: "disease", value: "disease" },
  { label: "earth", value: "earth" },
  { label: "escalation", value: "escalation" },
  { label: "explorer", value: "explorer" },
  { label: "fast", value: "fast" },
  { label: "fear", value: "fear" },
  { label: "fire", value: "fire" },
  { label: "gain-range-1", value: "gain-range-1" },
  { label: "gain-range-2", value: "gain-range-2" },
  { label: "gain-range-3", value: "gain-range-3" },
  { label: "gain-range-x", value: "gain-range-x" },
  { label: "isolate", value: "isolate" },
  { label: "jungle", value: "jungle" },
  { label: "jungle-mountain", value: "jungle-mountain" },
  { label: "jungle-presence", value: "jungle-presence" },
  { label: "jungle-sand", value: "jungle-sand" },
  { label: "jungle-wetland", value: "jungle-wetland" },
  { label: "major", value: "major" },
  { label: "markerminus", value: "markerminus" },
  { label: "markerplus", value: "markerplus" },
  { label: "minor", value: "minor" },
  { label: "moon", value: "moon" },
  { label: "mountain", value: "mountain" },
  { label: "mountain-jungle", value: "mountain-jungle" },
  { label: "mountain-presence", value: "mountain-presence" },
  { label: "mountain-sand", value: "mountain-sand" },
  { label: "mountain-wetland", value: "mountain-wetland" },
  { label: "move-presence-1", value: "move-presence-1" },
  { label: "move-presence-2", value: "move-presence-2" },
  { label: "move-presence-3", value: "move-presence-3" },
  { label: "move-presence-4", value: "move-presence-4" },
  { label: "no-own-presence", value: "no-own-presence" },
  { label: "no-presence", value: "no-presence" },
  { label: "ocean", value: "ocean" },
  { label: "or", value: "or" },
  { label: "plant", value: "plant" },
  { label: "presence", value: "presence" },
  { label: "range", value: "range" },
  { label: "range-[replace_w_icon]", value: "range-[replace_w_icon]" },
  { label: "range-0", value: "range-0" },
  { label: "range-1", value: "range-1" },
  { label: "range-2", value: "range-2" },
  { label: "range-3", value: "range-3" },
  { label: "range-4", value: "range-4" },
  { label: "sacred-site", value: "sacred-site" },
  { label: "sand", value: "sand" },
  { label: "sand-jungle", value: "sand-jungle" },
  { label: "sand-mountain", value: "sand-mountain" },
  { label: "sand-presence", value: "sand-presence" },
  { label: "sand-wetland", value: "sand-wetland" },
  { label: "slow", value: "slow" },
  { label: "spirit", value: "spirit" },
  { label: "spirit", value: "spirit" },
  { label: "star", value: "star" },
  { label: "strife", value: "strife" },
  { label: "sun", value: "sun" },
  { label: "terror-1", value: "terror-1" },
  { label: "terror-2", value: "terror-2" },
  { label: "terror-3", value: "terror-3" },
  { label: "town", value: "town" },
  { label: "vitality", value: "vitality" },
  { label: "water", value: "water" },
  { label: "wetland", value: "wetland" },
  { label: "wetland-presence", value: "wetland-presence" },
  { label: "wilds", value: "wilds" },
];

export const iconValuesSorted = iconValues.sort((a, b) => {
  return a.label.localeCompare(b.label);
});

const growthValues = [
  {
    label: "add-presence",
    value: "add-presence()",
    detail: [
      "add-presence(x) : Add a Presence up to x Range. _x can be 'any' or 1, 2, 3 or 4_",
      "add-presence(x,y) : Add a Presence with y conditions at x Range. y can be terrain types (including dual types), tokens, invaders, invader pieces, dahan, blight, etc.",
      "add-presence(x,y,z,...,_and/or_) : Add a Presence with multiple conditions y, z, etc at x Range, the last parameter must be 'or' or 'and'.",
      "add-presence(x,token,y,and/or) : Add a Presence and/or a token y (beasts, disease, etc) at x Range.",
      "add-presence(x,text,_your_text_here_) : Add a Presence at x Range. The presence text will read 'Add a Presence _your_text_here_'. The icon will be **!!!**",
      "add-presence(x,text,_your_text_here_,y,...) : Add a Presence at x Range. The presence text will read 'Add a Presence _your_text_here_'. The icon will be y and any number of additional icons separated by commas",
    ],
  },
  {
    label: "add-token",
    value: "add-token()",
    detail: [
      "add-token(x,y) : At range x add token type y",
      "add-token(x,y, z) : Add z tokens of y type at range x",
      "add-token(x,y,z,...,and/or) : At range x, add a tokens of type y, z, and/or more. The last parameter must be 'or' or 'and'.",
    ],
  },
  {
    label: "custom",
    value: "custom()",
    detail: [
      "custom(_your_text_here_) : A custom growth option with the image !!!",
      "custom(_your_text_here_,x,...) : A custom growth option with the x icon of your choice (ie. town, dahan, element, etc). Can use more than 1 icon and they will appear in a row.",
      "custom(_your_text_here_,text,x) : A custom growth option with the your custom text x in place of an icon.",
    ],
  },
  {
    label: "damage",
    value: "damage()",
    detail: [
      "damage(x,y) : At range x, deal y Damage",
      "damage-1, damage-2 : Deals 1 or 2 Damage in one of your Lands",
    ],
  },
  { label: "damage-1", value: "damage-1", detail: [] },
  { label: "damage-2", value: "damage-2", detail: [] },
  { label: "destroy-presence", value: "destroy-presence()", detail: ["destroy-presence : "] },
  {
    label: "discard",
    value: "discard()",
    detail: [
      "discard-cards : As seen on Downpour",
      "discard-card : ",
      "discard(x) : As seen on Ember-Eyed: discard(fire)",
    ],
  },
  { label: "discard-card", value: "discard-card", detail: [] },
  { label: "discard-cards", value: "discard-cards", detail: [] },
  {
    label: "element-marker",
    value: "element-marker()",
    detail: [
      "element-marker : Prepare 1 element marker",
      "element-marker(x) : Prepare x element markers (x can be more than 2, or negative)",
      "element-marker(-x) : x is the number to discard",
    ],
  },
  {
    label: "energy-per-play",
    value: "energy-per-play",
    detail: ["energy-per-play : Gain 1 Energy per Card Play."],
  },
  {
    label: "fear",
    value: "fear()",
    detail: [
      "fear(x) : Gain x Fear",
      "fear(x) : Gain 1 Fear per Element x",
      "fear(x,y) : Gain x Fear plus 1 Fear per Element y",
      "fear(text,_your_text_here_) : Gain 1 Fear per condition of your choosing. Icon will be a !!!.",
      "fear(x,text,_your_text_here_) : Gain x Fear plus 1 Fear per condition of your choosing. Icon will be a !!!.",
    ],
  },
  { label: "forget-power-card", value: "forget-power-card", detail: ["forget-power-card : "] },
  {
    label: "gain-card-play",
    value: "gain-card-play()",
    detail: ["gain-card-play : Gain +1 Card Play", "gain-card-play(x) : Gain +x Card Plays"],
  },
  {
    label: "gain-element",
    value: "gain-element()",
    detail: [
      "gain-element(x) : Gain Element x, which can be any the elements or 'any' or 'star'",
      "gain-element(x,y) : If y is a number, gain y of x Element",
      "gain-element(x,y,z,...) : If y is an element, gain x or y or z Elements",
      "gain-element(x,y,z,...,_and_) : Gain elements x, y, and z (or more). The last option must _and_",
    ],
  },
  {
    label: "gain-energy",
    value: "gain-energy()",
    detail: [
      "gain-energy(x) : Gain x Energy",
      "gain-energy(x) : Gain 1 Energy per Thing x (such as Elements, Sacred Sites, etc)",
      "gain-energy(x,y) : Gain x Energy plus 1 Energy per Thing y",
      "gain-energy(x,y,z) : Gain x Energy plus z Energy per Thing y",
      "gain-energy(x,text,_your_text_here_) : Gain x Energy plus 1 Energy per condition of your choosing. Icon will be a !!!.",
      "gain-energy(x,text,_your_text_here_,y) : Gain x Energy plus 1 Energy per condition of your choosing. Icon will be y.",
      "gain-energy(text,_your_text_here_) : Gain 1 Energy per condition of your choosing. Icon will be a !!!.",
      "gain-energy(text,_your_text_here_,y) : If y is Entity, gain 1 Energy per Entity w/ your custom text. If y is number, gain y Energy per !!! w/ your custom text.",
      "gain-energy(text,_your_text_here_,y,z) : Gain z Energy per Entity y of your choosing.",
    ],
  },
  { label: "gain-power-card", value: "gain-power-card", detail: [] },
  {
    label: "gain-range",
    value: "gain-range()",
    detail: [
      "gain-range(x) : Gain x range for Powers this turn",
      "gain-range(x,y) : Gain x range for y effects (powers, power cards, innate powers, everything) this turn",
    ],
  },
  {
    label: "gather",
    value: "gather()",
    detail: [
      "gather(x) : Gather entity x (dahan, beasts, presence, etc) into 1 of your lands.",
      "gather(x,y) : If y is a number, gather x into a land at y range.",
      "gather(x,y) : If y is a condition, gather x into 1 of your lands with y condition (sacred site, beasts, etc).",
      "gather(x,y,z) : Gather x into z lands of y condition. z can be a number or 'each'",
    ],
  },
  {
    label: "ignore-range",
    value: "ignore-range",
    detail: ["ignore-range : Ignore Range this turn (as seen on Finder)"],
  },
  {
    label: "incarna",
    value: "incarna()",
    detail: [
      "incarna(add-move,x) or incarna(add-move,x,y) : Adds an Incarna. Is an icon (usually presence). y is the incarna icon",
      "incarna(move,x) or incarna(move,x,y) : Moves an Incarna. X is the range & can be 1-4 or 'any'. Y is the incarna icon",
      "incarna(empower) : Empowers Incarna",
      "incarna(replace,x,y) : Replaces icon x with incarna. y is the incarna icon",
      "incarna(add-token,x,y) : Adds token/icon x at incarna. y is the incarna icon",
    ],
  },
  {
    label: "isolate",
    value: "isolate()",
    detail: ["isolate : Isolate one of your Lands", "isolate(x) : Isolate a land at x Range"],
  },
  {
    label: "make-fast",
    value: "make-fast",
    detail: ["make-fast : One of your Powers may be Fast"],
  },
  {
    label: "move-presence",
    value: "move-presence()",
    detail: [
      "move-presence(x) : Move a Presence up to x Range",
      "move-presence(x,y) : Move y Presence up to x Range",
      "move-presence(x,y) : Move Presence and token y up to x Range",
    ],
  },
  {
    label: "or",
    value: "or()",
    detail: ["or(x,y) : x and y are growth options (like the ones above)"],
  },
  {
    label: "presence-node",
    value: "presence-node()",
    detail: ["presence-node(x) : x is a growth option (like the ones above)"],
  },
  {
    label: "push",
    value: "push()",
    detail: [
      "push(x) : Push entity x (dahan, beasts, presence, etc) from 1 of your lands.",
      "push(x,y) : Push entity x (dahan, beasts, presence, etc) from a land at range y.",
      "push(x,y) : If y is a condition, push x from 1 of your lands with y condition (sacred site, beasts, etc).",
      "push(x,y,z) : Push x from z lands of condition y. y can be terrain types, sacred site, token types, etc. z can be a numeral or 'each' (or another word at your own risk).",
    ],
  },
  {
    label: "reclaim",
    value: "reclaim()",
    detail: [
      "relcaim(x) : x can be all, one, half, or custom",
      "relcaim(x,y) : x can be all or one. y is an element",
      "reclaim(custom,_your custom reclaim text_) : Custom reclaim text with a unique icon.",
    ],
  },
  {
    label: "replace",
    value: "replace()",
    detail: [
      "replace(x,y) : Replace token x with token y. Tokens can be presence or other things too.",
      "replace(x,y,z) : At range x, replace token y with token z.",
    ],
  },
  { label: "blank", value: "blank()", detail: ["blank : Creates a blank space"] },
];

export const growthValuesSorted = growthValues.sort((a, b) => {
  return a.label.localeCompare(b.label);
});
